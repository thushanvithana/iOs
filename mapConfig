import React, { useEffect, useState } from 'react';
import { StyleSheet, View, Text, TouchableOpacity } from 'react-native';
import MapView, { Marker, Polyline } from 'react-native-maps';
import * as Location from 'expo-location';

export default function TabTwoScreen() {
  const [pharmacyLocations, setPharmacyLocations] = useState([]);
  const [userLocation, setUserLocation] = useState(null);
  const [errorMessage, setErrorMessage] = useState(null);
  const [mapRegion, setMapRegion] = useState(null);
  const [routeCoordinates, setRouteCoordinates] = useState([]);

  useEffect(() => {
    async function fetchData() {
      try {
        const { status } = await Location.requestForegroundPermissionsAsync();
        if (status !== 'granted') {
          setErrorMessage('Permission to access location was denied');
          return;
        }

        const location = await Location.getCurrentPositionAsync({});
        setUserLocation(location.coords);

        const fetchedPharmacyLocations = [
          { id: 1, name: 'Pharmacy 1', latitude: 37.7749, longitude: -122.4194 },
          { id: 2, name: 'Pharmacy 2', latitude: 37.7749, longitude: -122.4294 },
        ];
        setPharmacyLocations(fetchedPharmacyLocations);

        setMapRegion({
          latitude: location.coords.latitude,
          longitude: location.coords.longitude,
          latitudeDelta: 0.0922,
          longitudeDelta: 0.0421,
        });
      } catch (error) {
        setErrorMessage('Error getting location: ' + error.message);
      }
    }

    fetchData();
  }, []);

  const handleShowLiveLocation = async () => {
    try {
      const location = await Location.getCurrentPositionAsync({});
      setUserLocation(location.coords);

      setMapRegion(prevRegion => ({
        ...prevRegion,
        latitude: location.coords.latitude,
        longitude: location.coords.longitude,
      }));

      // Fetch and display route
      fetchRoute(location.coords, pharmacyLocations[0]); // Assuming the first pharmacy location for demonstration
    } catch (error) {
      setErrorMessage('Error getting live location: ' + error.message);
    }
  };

  const fetchRoute = async (origin, destination) => {
    // Call Google Directions API or any other routing service
    // Fetch route information between origin and destination
    // Parse response to extract route coordinates
    // Update routeCoordinates state
    // For demonstration purposes, let's assume a simple route between two points
    const simpleRouteCoordinates = [
      origin,
      { latitude: destination.latitude, longitude: destination.longitude }
    ];
    setRouteCoordinates(simpleRouteCoordinates);
  };

  return (
    <View style={styles.container}>
      <Text style={styles.title}>Tab Two</Text>
      <MapView style={styles.map} initialRegion={mapRegion}>
        {pharmacyLocations.map(location => (
          <Marker key={location.id} coordinate={{
            latitude: location.latitude,
            longitude: location.longitude,
          }} title={location.name} />
        ))}
        {userLocation && (
          <Marker
            coordinate={{
              latitude: userLocation.latitude,
              longitude: userLocation.longitude,
            }}
            title="Your Location"
            pinColor="blue"
          />
        )}
        {routeCoordinates.length > 0 && (
          <Polyline
            coordinates={routeCoordinates}
            strokeWidth={4}
            strokeColor="red"
          />
        )}
      </MapView>
      <TouchableOpacity style={styles.button} onPress={handleShowLiveLocation}>
        <Text style={styles.buttonText}>Show Live Location</Text>
      </TouchableOpacity>
      {errorMessage && (
        <Text style={styles.error}>{errorMessage}</Text>
      )}
    </View>
  );
}

const styles = StyleSheet.create({
  container: {
    flex: 1,
    alignItems: 'center',
    justifyContent: 'center',
  },
  title: {
    fontSize: 20,
    fontWeight: 'bold',
  },
  map: {
    width: '100%',
    height: '80%',
  },
  button: {
    backgroundColor: 'rgba(0, 0, 0, 0.5)',
    padding: 10,
    borderRadius: 5,
    marginTop: 10,
  },
  buttonText: {
    color: 'white',
    fontSize: 16,
  },
  error: {
    color: 'red',
    marginTop: 10,
  },
});
